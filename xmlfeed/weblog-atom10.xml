<?xml version="1.0" encoding="iso-8859-1"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title type="html">panthema.net - Timo's Weblog</title><link href="http://panthema.net/"/><link href="http://panthema.net/xmlfeed/weblog-atom10.xml" rel="self"/><updated>2013-12-12T16:50:00Z</updated><author><name>Timo Bingmann</name><email>tbrss@panthema.net</email></author><generator>panthema.net XML Feed</generator><id>http://panthema.net/</id><entry><title>Released STXXL 1.4.0</title><link href="http://panthema.net/2013/1212-stxxl-1.4.0/index.html"/><id>tag:panthema.net,/2013/1212-stxxl-1.4.0/index.html</id><published>2013-12-12T16:50:00Z</published><updated>2013-12-12T16:50:00Z</updated><summary type="html">&lt;div style=&quot;float: right; clear: right; margin: 12pt 0pt 12pt 12pt; font-size: smaller; text-align: center&quot;&gt;&lt;a href=&quot;http://stxxl.sourceforge.net&quot;&gt;&lt;img src=&quot;/2013/1212-stxxl-1.4.0/thumb.png&quot; width=&quot;150&quot; height=&quot;150&quot; alt=&quot;STXXL simple logo&quot; title=&quot;STXXL simple logo&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;h1&gt;Released STXXL 1.4.0&lt;/h1&gt;&lt;p class=&quot;info&quot;&gt;Posted on 2013-12-12 16:50 by &lt;a href=&quot;/about/&quot;&gt;Timo Bingmann&lt;/a&gt;&lt;a href=&quot;http://plus.google.com/+TimoBingmann?rel=author&quot;&gt;&lt;/a&gt; at &lt;a href=&quot;/2013/1212-stxxl-1.4.0/&quot;&gt;Permlink&lt;/a&gt; with &lt;a href=&quot;/2013/1212-stxxl-1.4.0/#notes&quot;&gt;0 Comments&lt;/a&gt;. Tags: &lt;a href=&quot;/tags/c++.html&quot;&gt;c++&lt;/a&gt; &lt;a href=&quot;/tags/university.html&quot;&gt;university&lt;/a&gt; &lt;a href=&quot;/tags/stxxl.html&quot;&gt;stxxl&lt;/a&gt;&lt;/p&gt;&lt;div class=&quot;textcontent&quot;&gt;&lt;p&gt;&lt;a href=&quot;http://stxxl.sourceforge.net&quot;&gt;STXXL&lt;/a&gt; is an implementation of the C++ standard template library STL for external memory (out-of-core) computations, i.e., STXXL implements containers and algorithms that can process huge volumes of data that only fit on disks. While the compatibility to the STL supports ease of use and compatibility with existing applications, another design priority is high performance.&lt;/p&gt;&lt;p&gt;The project was originally created by Roman Dementiev and Peter Sanders at MPI Informatik in Saarbr&amp;uuml;cken. It moved to Karlsruhe with them in 2004. After Roman&amp;apos;s PhD defense, there was a cooperation with the Algorithm Engineering group at the University of Frankfurt to create better parallel asynchronous sorting. Afterwards, stewardship moved to Frankfurt, where work on flash/SSD drives and various external memory graph algorithms was done.&lt;/p&gt;&lt;p&gt;After a longer stretch without further work, I have decided to take part in future development as a maintainer. This is partly due to the my previous experience with it while implement in &lt;a href=&quot;/2012/esais/&quot;&gt;eSAIS, the external memory suffix and LCP array construction algorithm&lt;/a&gt;. And thus, today, the first release of the new 1.4 branch was published:&lt;/p&gt;&lt;p&gt;What&amp;apos;s new in 1.4.0 ?&lt;/p&gt;&lt;ul&gt;&lt;li&gt;reorganized source hierarchy into include/ lib/ tests/ examples/ doc/ tools/&lt;/li&gt;&lt;li&gt;CMake build system for cross-platform compilation&lt;/li&gt;&lt;li&gt;greatly improved documentation with tutorials and examples&lt;/li&gt;&lt;li&gt;efficient external matrix operations&lt;/li&gt;&lt;li&gt;new containers stxxl::sequence and stxxl::sorter&lt;/li&gt;&lt;li&gt;improved .stxxl disk configuration files and additional options&lt;/li&gt;&lt;li&gt;combined stxxl_tool of disk benchmarks&lt;/li&gt;&lt;li&gt;simple examples and skew3 as real-world stream application&lt;/li&gt;&lt;li&gt;support for Visual Studio 2012 and 2013 &lt;em&gt;without&lt;/em&gt; Boost&lt;/li&gt;&lt;li&gt;important bug fixes in stxxl::queue and stxxl::priority_queue &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary></entry><entry><title>Sound of Sorting: Viral Video on KIT Informatik Webpage</title><link href="http://panthema.net/2013/1024-Sound-of-Sorting-KIT-Informatik/index.html"/><id>tag:panthema.net,/2013/1024-Sound-of-Sorting-KIT-Informatik/index.html</id><published>2013-10-24T23:45:00Z</published><updated>2013-10-24T23:45:00Z</updated><summary type="html">&lt;div style=&quot;float: right; clear: right; margin: 12pt 0pt 12pt 12pt; font-size: smaller; text-align: center&quot;&gt;&lt;a href=&quot;/2013/1024-Sound-of-Sorting-KIT-Informatik/&quot;&gt;&lt;img src=&quot;/2013/1024-Sound-of-Sorting-KIT-Informatik/thumb.jpg&quot; width=&quot;300&quot; height=&quot;264&quot; alt=&quot;Screenshot of KIT Informatik Webpage&quot; title=&quot;Screenshot of KIT Informatik Webpage&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;h1&gt;Sound of Sorting: Viral Video on KIT Informatik Webpage&lt;/h1&gt;&lt;p class=&quot;info&quot;&gt;Posted on 2013-10-24 22:45 by &lt;a href=&quot;/about/&quot;&gt;Timo Bingmann&lt;/a&gt;&lt;a href=&quot;http://plus.google.com/+TimoBingmann?rel=author&quot;&gt;&lt;/a&gt; at &lt;a href=&quot;/2013/1024-Sound-of-Sorting-KIT-Informatik/&quot;&gt;Permlink&lt;/a&gt; with &lt;a href=&quot;/2013/1024-Sound-of-Sorting-KIT-Informatik/#notes&quot;&gt;0 Comments&lt;/a&gt;. Tags: &lt;a href=&quot;/tags/fun.html&quot;&gt;fun&lt;/a&gt; &lt;a href=&quot;/tags/sorting.html&quot;&gt;sorting&lt;/a&gt; &lt;a href=&quot;/tags/frontpage.html&quot;&gt;frontpage&lt;/a&gt;&lt;/p&gt;&lt;div class=&quot;textcontent&quot;&gt;&lt;p&gt;Little did I expect what would happen &lt;strong&gt;when coding&lt;/strong&gt; the &lt;a href=&quot;/2013/sound-of-sorting/&quot;&gt;Sound of Sorting&lt;/a&gt; demo program. The initial motivation was to create a program that counts the number of comparisons of sorting algorithms, so that the students in our lecture &lt;a href=&quot;http://algo2.iti.kit.edu/AlgorithmenI2013.php&quot;&gt;&amp;quot;Algorithms 1&amp;quot;&lt;/a&gt; could &lt;strong&gt;compare the results of theoretical analysis and real implementations&lt;/strong&gt;. There were many programs similar to the one I finally made, but there was no program in which the sorting algorithms were easily readable, and not entwined with visualization code. I needed the third-year students to see &amp;quot;simple&amp;quot; code and at the same time have comparison counting and nice visualizations. And none of the existing programs &lt;strong&gt;highlighted the internal workings&lt;/strong&gt; of the algorithms well.&lt;/p&gt;&lt;p&gt;These were the initial goals what became the &lt;a href=&quot;/2013/sound-of-sorting/&quot;&gt;Sound of Sorting&lt;/a&gt;. The program itself took only about &lt;strong&gt;seven days of coding work&lt;/strong&gt;, which was done from the 17th to 21st of May this year. The program had to be finished for the lecture on the 22nd, so there was a hard deadline to meet. The videos were created on the following weekends, and additional algorithms were added later.&lt;/p&gt;&lt;p&gt;Adding &lt;strong&gt;sound effects&lt;/strong&gt; was very much an &lt;strong&gt;afterthought&lt;/strong&gt;, because I had done some similar work previously with manipulating waveforms. Thus there was no learning curve to overcome to have comparisons play sounds. What kind of sound to play, however, needed a lot of artistic touch, trial and error, and the ability to map and transform frequency, oscillators and envelopes as needed. Forming, mixing and bending sound waves as done in the &lt;a href=&quot;/2013/sound-of-sorting/&quot;&gt;Sound of Sorting&lt;/a&gt; requires a mathematical mindset and some appropriate background.&lt;/p&gt;&lt;p&gt;The by-product of this demo program for teaching sort algorithms was the YouTube video &lt;a href=&quot;http://www.youtube.com/watch?v=kPRA0W1kECg&quot;&gt;&amp;quot;15 Sorting Algorithms in 6 Minutes&amp;quot;&lt;/a&gt; which, &lt;strong&gt;to my great surprise, went viral&lt;/strong&gt; on social networks and was viewed 420.000 times to-date. I&amp;apos;m glad that many people with otherwise no connections to algorithmics find this video interesting, and hope that those with further interest view the slower videos, which provide more insight into the algorithms.&lt;/p&gt;&lt;p&gt;Today, the video &lt;strong&gt;infected the front page of my current employer&lt;/strong&gt;: the &lt;a href=&quot;http://www.informatik.kit.edu/&quot;&gt;Department of Informatics&lt;/a&gt; at the &lt;a href=&quot;http://www.kit.edu&quot;&gt;Karlsruhe Institute of Technology (KIT)&lt;/a&gt;, which is of course whom I originally made the demo program for. The text, which I wrote for that occasion, can be viewed in German at the original &lt;a href=&quot;http://www.informatik.kit.edu/309_6813.php&quot;&gt;news article about the viral video&lt;/a&gt; (or in the screenshots below). I have translated it into English below, since it contains some further comments about the video.&lt;/p&gt;&lt;div style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;/2013/1024-Sound-of-Sorting-KIT-Informatik/&quot;&gt;This blog entry continues on the next page ...&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;</summary></entry><entry><title>Presented Short Paper about eSAIS at MASSIVE&apos;13 Workshop</title><link href="http://panthema.net/2013/0905-Inducing-Suffix-and-LCP-Arrays-in-External-Memory-MASSIVE13/index.html"/><id>tag:panthema.net,/2013/0905-Inducing-Suffix-and-LCP-Arrays-in-External-Memory-MASSIVE13/index.html</id><published>2013-09-05T19:00:00Z</published><updated>2013-09-05T19:00:00Z</updated><summary type="html">&lt;div style=&quot;float: right; clear: right; margin: 12pt 0pt 12pt 12pt; font-size: smaller; text-align: center&quot;&gt;&lt;a href=&quot;/2013/0905-Inducing-Suffix-and-LCP-Arrays-in-External-Memory-MASSIVE13/&quot;&gt;&lt;img src=&quot;/2013/0905-Inducing-Suffix-and-LCP-Arrays-in-External-Memory-MASSIVE13/thumb.png&quot; width=&quot;300&quot; height=&quot;226&quot; alt=&quot;Example of intuition behind the inducing process&quot; title=&quot;Example of intuition behind the inducing process&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;h1&gt;Presented Short Paper about eSAIS at MASSIVE&apos;13 Workshop&lt;/h1&gt;&lt;p class=&quot;info&quot;&gt;Posted on 2013-09-05 18:00 by &lt;a href=&quot;/about/&quot;&gt;Timo Bingmann&lt;/a&gt;&lt;a href=&quot;http://plus.google.com/+TimoBingmann?rel=author&quot;&gt;&lt;/a&gt; at &lt;a href=&quot;/2013/0905-Inducing-Suffix-and-LCP-Arrays-in-External-Memory-MASSIVE13/&quot;&gt;Permlink&lt;/a&gt; with &lt;a href=&quot;/2013/0905-Inducing-Suffix-and-LCP-Arrays-in-External-Memory-MASSIVE13/#notes&quot;&gt;0 Comments&lt;/a&gt;. Tags: &lt;a href=&quot;/tags/research.html&quot;&gt;research&lt;/a&gt; &lt;a href=&quot;/tags/stringology.html&quot;&gt;stringology&lt;/a&gt; &lt;a href=&quot;/tags/c++.html&quot;&gt;c++&lt;/a&gt; &lt;a href=&quot;/tags/talk.html&quot;&gt;talk&lt;/a&gt;&lt;/p&gt;&lt;div class=&quot;textcontent&quot;&gt;&lt;p&gt;Today, we presented a shorter version of our work on &amp;quot;&lt;strong&gt;Inducing Suffix and LCP Arrays in External Memory&lt;/strong&gt;&amp;quot; at the &lt;a href=&quot;http://www.madalgo.au.dk/massive2013/&quot;&gt;MASSIVE Workshop 2013&lt;/a&gt;, held adjacently with ESA at ALGO 2013 in Sophia Antipolis, France.&lt;/p&gt;&lt;p&gt;The slides of our presentation &lt;a title=&quot;Download 2013-09-05 eSAIS @ MASSIVE&apos;13.pdf (586 KiB)&quot; href=&quot;2013-09-05%20eSAIS%20%40%20MASSIVE%2713.pdf&quot;&gt;2013-09-05 eSAIS @ MASSIVE&apos;13.pdf &lt;img width=&quot;13&quot; height=&quot;17&quot; style=&quot;margin-bottom: -2px&quot; src=&quot;/img/filelink-pdf.png&quot; alt=&quot;2013-09-05 eSAIS @ MASSIVE&apos;13.pdf&quot;/&gt;&lt;/a&gt; and the corresponding short paper &lt;a title=&quot;Download massive13esais.pdf (490 KiB)&quot; href=&quot;massive13esais.pdf&quot;&gt;massive13esais.pdf &lt;img width=&quot;13&quot; height=&quot;17&quot; style=&quot;margin-bottom: -2px&quot; src=&quot;/img/filelink-pdf.png&quot; alt=&quot;massive13esais.pdf&quot;/&gt;&lt;/a&gt; are available online via this webpage.&lt;/p&gt;&lt;p&gt;Please refer to the &lt;a href=&quot;/2012/1119-eSAIS-Inducing-Suffix-and-LCP-Arrays-in-External-Memory/&quot;&gt;first eSAIS posting&lt;/a&gt; for details and source code.&lt;/p&gt;Our thanks goes to all the organizers for making such an inspiring workshop possible. &lt;/div&gt;</summary></entry><entry><title>Published &quot;The Sound of Sorting&quot; 0.6</title><link href="http://panthema.net/2013/0522-The-Sound-of-Sorting-0.6.html"/><id>tag:panthema.net,/2013/0522-The-Sound-of-Sorting-0.6.html</id><published>2013-05-23T00:50:00Z</published><updated>2013-05-23T00:50:00Z</updated><summary type="html">&lt;div style=&quot;float: right; clear: right; margin: 12pt 0pt 12pt 12pt; font-size: smaller; text-align: center&quot;&gt;&lt;a href=&quot;/2013/sound-of-sorting/&quot;&gt;&lt;img src=&quot;/2013/sound-of-sorting/thumb.gif&quot; width=&quot;300&quot; height=&quot;220&quot; alt=&quot;The Sound of Sorting demo program&quot; title=&quot;The Sound of Sorting demo program&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;h1&gt;Published &quot;The Sound of Sorting&quot; 0.6&lt;/h1&gt;&lt;p class=&quot;info&quot;&gt;Posted on 2013-05-22 23:50 by &lt;a href=&quot;/about/&quot;&gt;Timo Bingmann&lt;/a&gt;&lt;a href=&quot;http://plus.google.com/+TimoBingmann?rel=author&quot;&gt;&lt;/a&gt; at &lt;a href=&quot;/2013/0522-The-Sound-of-Sorting-0.6.html&quot;&gt;Permlink&lt;/a&gt; with &lt;a href=&quot;/2013/0522-The-Sound-of-Sorting-0.6.html#notes&quot;&gt;2 Comments&lt;/a&gt;. Tags: &lt;a href=&quot;/tags/c++.html&quot;&gt;c++&lt;/a&gt; &lt;a href=&quot;/tags/university.html&quot;&gt;university&lt;/a&gt; &lt;a href=&quot;/tags/fun.html&quot;&gt;fun&lt;/a&gt; &lt;a href=&quot;/tags/sorting.html&quot;&gt;sorting&lt;/a&gt;&lt;/p&gt;&lt;div class=&quot;textcontent&quot;&gt;&lt;p&gt;This post announces the publication of my demo program for integer string sorting algorithms, called &amp;quot;&lt;strong&gt;The Sound of Sorting&lt;/strong&gt;&amp;quot;. It both visualizes the internals of sorting algorithms, and generates sound effects from the values being compared!&lt;/p&gt;&lt;p&gt;The demo is implemented using the &lt;strong&gt;cross-platform&lt;/strong&gt; toolkits wxWidgets and SDL, can be executed on Windows, Linux and Mac, and runs in real time.&lt;/p&gt;&lt;p&gt;There are also many videos of the sorting algorithm on my &lt;a href=&quot;http://www.youtube.com/user/tbingmann&quot;&gt;new YouTube channel&lt;/a&gt;.&lt;/p&gt;See the &lt;a href=&quot;/2013/sound-of-sorting/&quot;&gt;Sound of Sorting project page&lt;/a&gt; for the demo program and source code, and more information about version 0.6. &lt;/div&gt;</summary></entry><entry><title>Released parallel-string-sorting 0.5 including Parallel Super Scalar String Sample Sort</title><link href="http://panthema.net/2013/0508-parallel-string-sorting-0.5.html"/><id>tag:panthema.net,/2013/0508-parallel-string-sorting-0.5.html</id><published>2013-05-08T12:47:00Z</published><updated>2013-05-08T12:47:00Z</updated><summary type="html">&lt;div style=&quot;float: right; clear: right; margin: 12pt 0pt 12pt 12pt; font-size: smaller; text-align: center&quot;&gt;&lt;a href=&quot;/2013/parallel-string-sorting/&quot;&gt;&lt;img src=&quot;/2013/parallel-string-sorting/thumb.jpg&quot; width=&quot;300&quot; height=&quot;170&quot; alt=&quot;Ternary search tree used in parallel super scalar string sample sort&quot; title=&quot;Ternary search tree used in parallel super scalar string sample sort&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;h1&gt;Released parallel-string-sorting 0.5 including Parallel Super Scalar String Sample Sort&lt;/h1&gt;&lt;p class=&quot;info&quot;&gt;Posted on 2013-05-08 11:47 by &lt;a href=&quot;/about/&quot;&gt;Timo Bingmann&lt;/a&gt;&lt;a href=&quot;http://plus.google.com/+TimoBingmann?rel=author&quot;&gt;&lt;/a&gt; at &lt;a href=&quot;/2013/0508-parallel-string-sorting-0.5.html&quot;&gt;Permlink&lt;/a&gt; with &lt;a href=&quot;/2013/0508-parallel-string-sorting-0.5.html#notes&quot;&gt;0 Comments&lt;/a&gt;. Tags: &lt;a href=&quot;/tags/c++.html&quot;&gt;c++&lt;/a&gt; &lt;a href=&quot;/tags/parallel-string-sorting.html&quot;&gt;parallel-string-sorting&lt;/a&gt; &lt;a href=&quot;/tags/sorting.html&quot;&gt;sorting&lt;/a&gt;&lt;/p&gt;&lt;div class=&quot;textcontent&quot;&gt;&lt;p&gt;This short post announces the first &lt;strong&gt;public version&lt;/strong&gt; of our parallel string sorting project. It is a test framework and algorithm collection containing many sequential and parallel string sorting implementations.&lt;/p&gt;&lt;p&gt;The collection includes parallel super scalar string sample sort (pS&lt;sup&gt;5&lt;/sup&gt;), which we developed and showed to have the &lt;strong&gt;highest parallel speedups&lt;/strong&gt; on modern multi-core shared memory systems.&lt;/p&gt;See the &lt;a href=&quot;/2013/parallel-string-sorting/&quot;&gt;parallel-string-sorting project page&lt;/a&gt; for our technical report and more information about version 0.5. &lt;/div&gt;</summary></entry><entry><title>Publishing STX B+ Tree 0.9 - Speed Gains over 0.8.6</title><link href="http://panthema.net/2013/0507-STX-B+Tree-0.9/index.html"/><id>tag:panthema.net,/2013/0507-STX-B+Tree-0.9/index.html</id><published>2013-05-07T22:16:00Z</published><updated>2013-05-07T22:16:00Z</updated><summary type="html">&lt;div style=&quot;float: right; clear: right; margin: 12pt 0pt 12pt 12pt; font-size: smaller; text-align: center&quot;&gt;&lt;a href=&quot;/2007/stx-btree/&quot;&gt;&lt;img src=&quot;/2007/stx-btree/thumb.png&quot; width=&quot;252&quot; height=&quot;193&quot; alt=&quot;Small drawing of a B+ tree&quot; title=&quot;Small drawing of a B+ tree&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;h1&gt;Publishing STX B+ Tree 0.9 - Speed Gains over 0.8.6&lt;/h1&gt;&lt;p class=&quot;info&quot;&gt;Posted on 2013-05-07 21:16 by &lt;a href=&quot;/about/&quot;&gt;Timo Bingmann&lt;/a&gt;&lt;a href=&quot;http://plus.google.com/+TimoBingmann?rel=author&quot;&gt;&lt;/a&gt; at &lt;a href=&quot;/2013/0507-STX-B+Tree-0.9/&quot;&gt;Permlink&lt;/a&gt; with &lt;a href=&quot;/2013/0507-STX-B+Tree-0.9/#notes&quot;&gt;0 Comments&lt;/a&gt;. Tags: &lt;a href=&quot;/tags/stx-btree.html&quot;&gt;stx-btree&lt;/a&gt;&lt;/p&gt;&lt;div class=&quot;textcontent&quot;&gt;&lt;p&gt;This blog post announces the new version 0.9 of my popular &lt;a href=&quot;/2007/stx-btree&quot;&gt;STX B+ Tree&lt;/a&gt; library of C++ templates, speedtests and demos. Since the last release in 2011, many patches and new ideas have accumulated. Here a summary of the most prominent changes:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Changed the &lt;code&gt;find_lower()&lt;/code&gt; function, which is central to finding keys or insertion points to not use binary search for small node sizes. The reasoning behind this change is discussed in &lt;a href=&quot;/2013/0504-STX-B+Tree-Binary-vs-Linear-Search/&quot;&gt;another blog post&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Added a &lt;code&gt;bulk_load()&lt;/code&gt; to all &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; variants to construct a B+ tree from a pre-sorted iterator range. The sorted range is first copied into leaf nodes, over which then the B+ tree inner nodes are iteratively built.&lt;/li&gt;&lt;li&gt;The B+ tree template source code is now published under the &lt;a href=&quot;http://www.boost.org/users/license.html&quot;&gt;Boost Software License&lt;/a&gt;! Use it!&lt;/li&gt;&lt;li&gt;More minor changes are listed in the &lt;a href=&quot;/2007/stx-btree/#changelog&quot;&gt;ChangeLog&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;STX B+ tree version 0.9 is available &lt;a href=&quot;/2007/stx-btree&quot;&gt;from the usual project webpage&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The switch from binary search to linear scan, and all further patches and optimization call for a direct comparison of version 0.8.6 and 0.9. Because of special optimizations to the &lt;code&gt;btree_set&lt;/code&gt; specializations, the following plots differentiate between &lt;code&gt;set&lt;/code&gt; and &lt;code&gt;map&lt;/code&gt;s.&lt;/p&gt;&lt;div style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;/2013/0507-STX-B+Tree-0.9/&quot;&gt;This blog entry continues on the next page ...&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;</summary></entry><entry><title>STX B+ Tree Speed Test Measurements on Raspberry Pi (Model B)</title><link href="http://panthema.net/2013/0506-STX-B+Tree-on-Raspberry-Pi/index.html"/><id>tag:panthema.net,/2013/0506-STX-B+Tree-on-Raspberry-Pi/index.html</id><published>2013-05-06T10:48:00Z</published><updated>2013-05-06T10:48:00Z</updated><summary type="html">&lt;div style=&quot;float: right; clear: right; margin: 12pt 0pt 12pt 12pt; font-size: smaller; text-align: center&quot;&gt;&lt;a href=&quot;/2013/0506-STX-B+Tree-on-Raspberry-Pi/&quot;&gt;&lt;img src=&quot;/2013/0506-STX-B+Tree-on-Raspberry-Pi/thumb.jpg&quot; width=&quot;300&quot; height=&quot;206&quot; alt=&quot;Photo of my Raspberry Pi Model B&quot; title=&quot;Photo of my Raspberry Pi Model B&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;h1&gt;STX B+ Tree Speed Test Measurements on Raspberry Pi (Model B)&lt;/h1&gt;&lt;p class=&quot;info&quot;&gt;Posted on 2013-05-06 09:48 by &lt;a href=&quot;/about/&quot;&gt;Timo Bingmann&lt;/a&gt;&lt;a href=&quot;http://plus.google.com/+TimoBingmann?rel=author&quot;&gt;&lt;/a&gt; at &lt;a href=&quot;/2013/0506-STX-B+Tree-on-Raspberry-Pi/&quot;&gt;Permlink&lt;/a&gt; with &lt;a href=&quot;/2013/0506-STX-B+Tree-on-Raspberry-Pi/#notes&quot;&gt;0 Comments&lt;/a&gt;. Tags: &lt;a href=&quot;/tags/stx-btree.html&quot;&gt;stx-btree&lt;/a&gt;&lt;/p&gt;&lt;div class=&quot;textcontent&quot;&gt;&lt;p&gt;The &lt;a href=&quot;http://www.raspberrypi.org/&quot;&gt;Raspberry Pi&lt;/a&gt; is maybe one of the most hyped embedded system projects in the last year, and I also got myself one for experiments. People are doing amazing things with this Linux-in-a-box SoC. Doubtlessly, the popularity is due to the standardized platform and a large community forming around it, which makes fixing the many small problems with Linux on ARM systems feasible. For me, the Raspberry Pi is an alternative architecture on which to test my algorithms and libraries, which exhibits somewhat &lt;strong&gt;different characteristics&lt;/strong&gt; than the highly optimized desktop CPUs.&lt;/p&gt;&lt;p&gt;So I decided to run my &lt;a href=&quot;/2007/stx-btree/&quot;&gt;STX B+ Tree speed test&lt;/a&gt; on the Raspberry Pi Model B, because most people use the SoC for multimedia purposes and little other memory performance data is available. The B+ tree speed test gives &lt;strong&gt;insight into the platform&amp;apos;s overall memory and processing performance&lt;/strong&gt;, and thus yields a better assessment of how useful the system is for general purpose applications (unlike multimedia decoding). Most benchmarks focus solely on floating point or integer arithmetic, which alone are very poor indicators for overall system performance. The Raspberry Pi forums say it has performance similar to a &amp;quot;Pentium 2 with 300 MHz&amp;quot;, but that is for arithmetic.&lt;/p&gt;&lt;div style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;/2013/0506-STX-B+Tree-on-Raspberry-Pi/&quot;&gt;This blog entry continues on the next page ...&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;</summary></entry><entry><title>STX B+ Tree Measuring Memory Usage with malloc_count</title><link href="http://panthema.net/2013/0505-STX-B+Tree-Memory-Usage/index.html"/><id>tag:panthema.net,/2013/0505-STX-B+Tree-Memory-Usage/index.html</id><published>2013-05-05T10:44:00Z</published><updated>2013-05-05T10:44:00Z</updated><summary type="html">&lt;h1&gt;STX B+ Tree Measuring Memory Usage with malloc_count&lt;/h1&gt;&lt;p class=&quot;info&quot;&gt;Posted on 2013-05-05 09:44 by &lt;a href=&quot;/about/&quot;&gt;Timo Bingmann&lt;/a&gt;&lt;a href=&quot;http://plus.google.com/+TimoBingmann?rel=author&quot;&gt;&lt;/a&gt; at &lt;a href=&quot;/2013/0505-STX-B+Tree-Memory-Usage/&quot;&gt;Permlink&lt;/a&gt; with &lt;a href=&quot;/2013/0505-STX-B+Tree-Memory-Usage/#notes&quot;&gt;2 Comments&lt;/a&gt;. Tags: &lt;a href=&quot;/tags/stx-btree.html&quot;&gt;stx-btree&lt;/a&gt; &lt;a href=&quot;/tags/frontpage.html&quot;&gt;frontpage&lt;/a&gt;&lt;/p&gt;&lt;div class=&quot;textcontent&quot;&gt;&lt;p&gt;Within the next few days, a new version of my popular &lt;a href=&quot;/2007/stx-btree&quot;&gt;STX B+ Tree&lt;/a&gt; library will be released. In light of this imminent release, I created a &lt;strong&gt;memory profile&lt;/strong&gt; with my &lt;a href=&quot;/2013/malloc_count/&quot;&gt;&lt;code&gt;malloc_count&lt;/code&gt; tool&lt;/a&gt;, comparing the requirements of four different C++ maps with integer keys and values.&lt;/p&gt;&lt;p&gt;The test is really simple: create a map container, insert 8 Mi random integer key/value pairs, and destruct it. The memory profile shows the amount of memory over time as allocated via &lt;code&gt;malloc()&lt;/code&gt; or &lt;code&gt;new&lt;/code&gt;. The test encompasses the usual gcc STL&amp;apos;s &lt;strong&gt;&lt;code&gt;map&lt;/code&gt;&lt;/strong&gt; which is a red-black tree, the older &lt;strong&gt;&lt;code&gt;hash_map&lt;/code&gt;&lt;/strong&gt; from gcc&amp;apos;s STL extensions, the newer gcc C++ &lt;strong&gt;&lt;code&gt;tr1::unordered_map&lt;/code&gt;&lt;/strong&gt;, and of course the &lt;strong&gt;&lt;code&gt;stx::btree_map&lt;/code&gt;&lt;/strong&gt; with default configuration. As a reference, I also added the usual STL vector and deque (not map containers), to verify the plotting facilities.&lt;/p&gt;&lt;p&gt;To isolate &lt;strong&gt;heap fragmentation&lt;/strong&gt;, the profiler &lt;code&gt;fork()&lt;/code&gt;s separate process contexts before each run. To avoid problems with multiple equal random keys, the multimap variant of all containers is used. Here is the memory profile (also included in the STX B+ Tree tarball):&lt;/p&gt;&lt;p style=&quot;text-align: center&quot;&gt; &lt;a href=&quot;memprofile.pdf&quot;&gt;&lt;img alt=&quot;Memory profile of map containers&quot; src=&quot;memprofile.png&quot; title=&quot;Memory profile of map containers&quot; width=&quot;700&quot; height=&quot;490&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;div style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;/2013/0505-STX-B+Tree-Memory-Usage/&quot;&gt;This blog entry continues on the next page ...&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;</summary></entry><entry><title>STX B+ Tree Revisiting Binary Search</title><link href="http://panthema.net/2013/0504-STX-B+Tree-Binary-vs-Linear-Search/index.html"/><id>tag:panthema.net,/2013/0504-STX-B+Tree-Binary-vs-Linear-Search/index.html</id><published>2013-05-04T13:44:00Z</published><updated>2013-05-04T13:44:00Z</updated><summary type="html">&lt;div style=&quot;float: right; clear: right; margin: 12pt 0pt 12pt 12pt; font-size: smaller; text-align: center&quot;&gt;&lt;a href=&quot;/2013/0504-STX-B+Tree-Binary-vs-Linear-Search/&quot;&gt;&lt;img src=&quot;/2013/0504-STX-B+Tree-Binary-vs-Linear-Search/thumb.gif&quot; width=&quot;300&quot; height=&quot;112&quot; alt=&quot;Animation showing binary search and linear scan&quot; title=&quot;Animation showing binary search and linear scan&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;h1&gt;STX B+ Tree Revisiting Binary Search&lt;/h1&gt;&lt;p class=&quot;info&quot;&gt;Posted on 2013-05-04 12:44 by &lt;a href=&quot;/about/&quot;&gt;Timo Bingmann&lt;/a&gt;&lt;a href=&quot;http://plus.google.com/+TimoBingmann?rel=author&quot;&gt;&lt;/a&gt; at &lt;a href=&quot;/2013/0504-STX-B+Tree-Binary-vs-Linear-Search/&quot;&gt;Permlink&lt;/a&gt; with &lt;a href=&quot;/2013/0504-STX-B+Tree-Binary-vs-Linear-Search/#notes&quot;&gt;0 Comments&lt;/a&gt;. Tags: &lt;a href=&quot;/tags/stx-btree.html&quot;&gt;stx-btree&lt;/a&gt;&lt;/p&gt;&lt;div class=&quot;textcontent&quot;&gt;&lt;p&gt;While developing another piece of software, I happened to require a customizable binary search implementation, which lead me to revisit the binary search function of my quite popular &lt;a href=&quot;/2007/stx-btree/&quot;&gt;STX B+ Tree implementation&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The binary search is a central component in the container, both for performance and correctness, as it is used when traversing the tree in search for a key or an insertion point. It is implemented in the &lt;code&gt;find_lower()&lt;/code&gt; (and &lt;code&gt;find_upper()&lt;/code&gt;) functions. &lt;/p&gt;&lt;p&gt;In a first step, I cleaned the implementation to use an &lt;strong&gt;exclusive right boundary&lt;/strong&gt;. In this binary search variant, &lt;code&gt;hi&lt;/code&gt; points to the first element &lt;strong&gt;beyond&lt;/strong&gt; the end (with the same meaning as usual &lt;code&gt;end()&lt;/code&gt; C++ iterator). This got rid of the special case handled after the while loop. The exclusive right boundary is also a &lt;strong&gt;more natural&lt;/strong&gt; implementation variant (even though most computer science textbooks contain the inclusive version).&lt;/p&gt;&lt;p&gt;Having thus changed the binary search, I reran the speed tests. However, to my surprise, the performance of the library &lt;strong&gt;decreased slightly&lt;/strong&gt;, but consistently. See the code &lt;a href=&quot;https://github.com/bingmann/stx-btree/commit/39580c19dd2ff344d19ebda97efc70b4a5208598&quot;&gt;diff 39580c19&lt;/a&gt; and resulting &lt;a href=&quot;btree-speedtest-diff-39580c19.pdf&quot;&gt;speed test PDF&lt;/a&gt;, where solid lines are after the patch and dashed ones before.&lt;/p&gt;&lt;p&gt;After some research, I found a good, independent &lt;a href=&quot;http://create.stephan-brumme.com/binary-search/&quot;&gt;study of binary search variants by Stephan Brumme&lt;/a&gt;. His summary is that a linear scan is more efficient than binary search, if the keys are located in only one cache line. This (of course) explained the performance decrease I measured, as my &amp;quot;special case&amp;quot; after the search was in fact a very short linear scan of two element.&lt;/p&gt;&lt;div style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;/2013/0504-STX-B+Tree-Binary-vs-Linear-Search/&quot;&gt;This blog entry continues on the next page ...&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;</summary></entry><entry><title>Released disk-filltest 0.7 - Simple Tool to Detect Bad Disks by Filling with Random Data</title><link href="http://panthema.net/2013/0327-disk-filltest-0.7.html"/><id>tag:panthema.net,/2013/0327-disk-filltest-0.7.html</id><published>2013-03-27T21:32:00Z</published><updated>2013-03-27T21:32:00Z</updated><summary type="html">&lt;div style=&quot;float: right; clear: right; margin: 12pt 0pt 12pt 12pt; font-size: smaller; text-align: center&quot;&gt;&lt;a href=&quot;/2013/disk-filltest/&quot;&gt;&lt;img src=&quot;/2013/disk-filltest/thumb.gif&quot; width=&quot;300&quot; height=&quot;215&quot; alt=&quot;Thumbnail of a pie chart filling to 100%&quot; title=&quot;Thumbnail of a pie chart filling to 100%&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;h1&gt;Released disk-filltest 0.7 - Simple Tool to Detect Bad Disks by Filling with Random Data&lt;/h1&gt;&lt;p class=&quot;info&quot;&gt;Posted on 2013-03-27 21:32 by &lt;a href=&quot;/about/&quot;&gt;Timo Bingmann&lt;/a&gt;&lt;a href=&quot;http://plus.google.com/+TimoBingmann?rel=author&quot;&gt;&lt;/a&gt; at &lt;a href=&quot;/2013/0327-disk-filltest-0.7.html&quot;&gt;Permlink&lt;/a&gt; with &lt;a href=&quot;/2013/0327-disk-filltest-0.7.html#notes&quot;&gt;0 Comments&lt;/a&gt;. Tags: &lt;a href=&quot;/tags/c++.html&quot;&gt;c++&lt;/a&gt; &lt;a href=&quot;/tags/utilities.html&quot;&gt;utilities&lt;/a&gt;&lt;/p&gt;&lt;div class=&quot;textcontent&quot;&gt;&lt;p&gt;This post announces the first version of &lt;code&gt;disk-filltest&lt;/code&gt;, a very simple tool to test for bad blocks on a disk by filling it with random data. The function of disk-filltest is simple:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Write&lt;/strong&gt; files &lt;code&gt;random-########&lt;/code&gt; to the current directory until the disk is full.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Read&lt;/strong&gt; the files again and &lt;strong&gt;verify&lt;/strong&gt; the pseudo-random sequence written.&lt;/li&gt;&lt;li&gt;Any write or read error will be reported, either by the operating system or by checking the pseudo-random sequence.&lt;/li&gt;&lt;li&gt;Optionally, delete the random files after a successful run.&lt;/li&gt;&lt;/ul&gt;See &lt;a href=&quot;/2013/disk-filltest/&quot;&gt;the disk-filltest&lt;/a&gt; project page for more information about version 0.7. &lt;/div&gt;</summary></entry></feed>
